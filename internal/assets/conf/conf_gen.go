// Code generated for package conf by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../conf/app.conf
// ../../../conf/app.sample.conf
// ../../../conf/app.test.conf
// ../../../conf/nginx.rw
// ../../../conf/novelsearch.conf
// ../../../conf/novelsearch.tpl.conf
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcb\x4e\xe3\x48\x14\x5d\x4f\x7d\xc5\x95\xb3\x43\x22\x38\x84\x30\xc9\x22\x23\xb1\x98\xfd\x48\xf3\x01\x51\xc5\x2e\xb0\x45\x5c\xe5\xb1\x1d\x1e\xb3\xca\x20\x60\x32\x8f\x90\x07\x22\x34\x0f\x35\x4a\x37\x10\x5a\xd0\x49\x16\x74\xba\x49\x08\xfd\x33\xa9\x72\xb2\xea\x5f\x68\x95\x1d\xe8\xd0\x42\x6d\x4b\x65\xdf\x73\xef\x39\x75\xee\x55\x15\xb6\x6d\x8a\x2d\x02\x69\xa0\x6c\x8d\xe4\x5c\x82\x1d\xcd\x40\x86\xe7\xd9\x36\x73\x3c\x48\x43\x4a\x4d\xa9\xc8\xc9\x53\x8b\xe9\xb2\xca\x76\x98\x8e\xd0\x1a\x71\x5c\x93\x51\x48\x43\x2c\xaa\x46\x55\xa4\x31\x7b\xd3\x21\x7f\xe4\x89\xeb\x65\x99\xbe\x09\x69\xf0\x9c\x3c\x41\x28\x02\xfe\xf5\x91\xbf\x75\xc7\x2b\x25\xbf\xd9\x41\xae\xe9\x91\xe8\x64\x3b\xde\x29\x8f\xda\xb7\xa2\x72\xea\xdf\xbe\x99\xe5\x95\x3d\x5e\xee\xf8\xad\x86\x5f\xd9\x45\x91\x30\x1a\x7d\x6c\xf3\x87\x6d\x84\x75\xcb\xa4\x19\x1b\x7b\x06\xa4\x21\x08\xa4\xac\x38\xe8\x88\x52\x8b\xf7\xf6\xc7\x3b\x25\x7f\xd0\x42\x7a\x36\x6a\x30\x57\xfa\x8d\xcd\xff\x2c\x2d\x45\x63\x12\xcb\xbb\xc4\x81\x34\x38\x8c\x79\x32\xb4\xb1\xeb\xae\x33\x47\x87\x34\x28\x12\x53\x02\x30\xec\x33\x1e\x57\x17\x65\xf8\xc2\x34\x64\x91\x43\x96\xcd\x0d\xe9\xc0\xb6\x33\x12\xf0\x4c\x8b\xfc\xc9\xa8\x2c\x5d\x72\x4d\x3c\xf7\xbb\x81\xe9\x8a\x81\xcd\xa0\xe7\x93\xaa\xd8\x6b\x4e\x9c\xfd\x4a\x71\x36\x47\x96\xa4\xf1\xc7\xb1\x04\xc1\x92\xae\x4b\x6b\xca\x93\x5f\x25\xc4\x7f\x0b\xed\x24\xd5\x64\x12\x21\xa9\x36\x6a\x35\x78\xb1\x36\xec\xf7\xf9\xbf\x0d\x14\xf9\x09\x5c\xa2\x31\xaa\x83\x65\xd2\xbc\x47\xc0\x60\x79\x07\x74\xbc\x09\x16\xa3\x9e\x01\xeb\x84\xac\x02\x80\xc6\x2c\x0b\x53\x1d\x45\x60\xdc\xe8\xf1\x5e\xf9\xcb\xfd\xb1\xdf\xac\x41\xf0\xf0\xe2\xae\xfc\x88\xc3\x6e\xb0\x5e\xc8\xf5\xb4\x18\x64\xaa\x57\x93\x92\xea\x60\xd8\x3f\x97\xec\xcb\xfa\xb8\xf1\xc1\x2f\xde\xf0\x72\x1d\x44\xbb\xcc\xcf\xdf\x2d\xf8\x5b\x77\x89\x14\xbf\x2f\xf0\xe6\x7f\x61\x02\x69\x0e\xa3\x51\x93\xea\x64\x23\xe3\xda\xa6\x1e\x8c\x5c\x51\x21\x91\x82\x05\x98\x91\xaf\x22\xdb\xf8\xfc\x7a\x34\x18\x88\x93\x5b\x51\xef\x48\xa9\xb8\xdf\xac\x89\x7f\x9a\xa3\xc6\xff\xc3\x4f\x05\x71\xd3\x08\x55\x82\xb1\x67\xbe\xd7\x9a\x99\x8b\xab\xa1\xd2\xa3\x1a\xdf\xb9\xf2\xaf\x8f\x42\xb5\xd9\x5f\x44\xbb\x9c\xe0\xc5\xdd\x71\xed\x6c\x5a\x0b\xe7\x72\xcf\xfc\xcc\xcc\xc5\xd4\x69\x8d\xf0\xec\x85\x1a\x21\xc3\x65\x2e\x9b\xa2\x24\x52\xb2\x87\xf9\xf8\x37\x8a\x7f\xf4\xc0\x7b\x97\xe2\xf2\x94\x97\x0e\xa6\x89\x59\x6c\xea\xf9\x2c\xa6\x2b\x3f\x64\x8f\xb7\x5a\xc3\x7e\x97\xb7\x8e\xc5\x61\x97\x97\xab\xe3\xc2\x5f\x93\x6d\x09\xd5\x2d\x6c\xe6\x5e\x62\x49\x9f\xf5\xbf\x87\xfd\xae\x7f\xbf\xcf\xdf\xbf\xe2\xe7\xdb\xc1\x15\x79\x06\x4e\x6e\xca\xb2\x99\x23\x19\x0d\x6b\x86\x3c\x94\x4a\x34\xf8\x53\xa6\xd0\x0c\xd9\xb0\x4d\x47\x26\x93\x8b\x0b\xaa\xaa\xaa\x4f\x32\xe2\x6d\x41\x9c\x5d\x84\x66\x34\x83\x68\xab\x19\xc9\x0a\xa7\xa6\x42\x6c\xe2\xe5\x6b\x00\x00\x00\xff\xff\xe7\x28\x14\x3d\x2b\x04\x00\x00"

func confAppConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppConf,
		"conf/app.conf",
	)
}

func confAppConf() (*asset, error) {
	bytes, err := confAppConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confAppSampleConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcb\x4e\xe3\x48\x14\x5d\x4f\x7d\xc5\x95\xb3\x43\x22\x38\x84\x30\xc9\x22\x23\xb1\x98\xfd\x48\xf3\x01\x51\xc5\x2e\xb0\x45\x5c\xe5\xb1\x1d\x1e\xb3\xca\x20\x60\x32\x8f\x90\x07\x22\x34\x0f\x35\x4a\x37\x10\x5a\xd0\x49\x16\x74\xba\x49\x08\xfd\x33\xa9\x72\xb2\xea\x5f\x68\x95\x1d\xe8\xd0\x42\x6d\x4b\x65\xdf\x73\xef\x39\x75\xee\x55\x15\xb6\x6d\x8a\x2d\x02\x69\xa0\x6c\x8d\xe4\x5c\x82\x1d\xcd\x40\x86\xe7\xd9\x36\x73\x3c\x48\x43\x4a\x4d\xa9\xc8\xc9\x53\x8b\xe9\xb2\xca\x76\x98\x8e\xd0\x1a\x71\x5c\x93\x51\x48\x43\x2c\xaa\x46\x55\xa4\x31\x7b\xd3\x21\x7f\xe4\x89\xeb\x65\x99\xbe\x09\x69\xf0\x9c\x3c\x41\x28\x02\xfe\xf5\x91\xbf\x75\xc7\x2b\x25\xbf\xd9\x41\xae\xe9\x91\xe8\x64\x3b\xde\x29\x8f\xda\xb7\xa2\x72\xea\xdf\xbe\x99\xe5\x95\x3d\x5e\xee\xf8\xad\x86\x5f\xd9\x45\x91\x30\x1a\x7d\x6c\xf3\x87\x6d\x84\x75\xcb\xa4\x19\x1b\x7b\x06\xa4\x21\x08\xa4\xac\x38\xe8\x88\x52\x8b\xf7\xf6\xc7\x3b\x25\x7f\xd0\x42\x7a\x36\x6a\x30\x57\xfa\x8d\xcd\xff\x2c\x2d\x45\x63\x12\xcb\xbb\xc4\x81\x34\x38\x8c\x79\x32\xb4\xb1\xeb\xae\x33\x47\x87\x34\x28\x12\x53\x02\x30\xec\x33\x1e\x57\x17\x65\xf8\xc2\x34\x64\x91\x43\x96\xcd\x0d\xe9\xc0\xb6\x33\x12\xf0\x4c\x8b\xfc\xc9\xa8\x2c\x5d\x72\x4d\x3c\xf7\xbb\x81\xe9\x8a\x81\xcd\xa0\xe7\x93\xaa\xd8\x6b\x4e\x9c\xfd\x4a\x71\x36\x47\x96\xa4\xf1\xc7\xb1\x04\xc1\x92\xae\x4b\x6b\xca\x93\x5f\x25\xc4\x7f\x0b\xed\x24\xd5\x64\x12\x21\xa9\x36\x6a\x35\x78\xb1\x36\xec\xf7\xf9\xbf\x0d\x14\xf9\x09\x5c\xa2\x31\xaa\x83\x65\xd2\xbc\x47\xc0\x60\x79\x07\x74\xbc\x09\x16\xa3\x9e\x01\xeb\x84\xac\x02\x80\xc6\x2c\x0b\x53\x1d\x45\x60\xdc\xe8\xf1\x5e\xf9\xcb\xfd\xb1\xdf\xac\x41\xf0\xf0\xe2\xae\xfc\x88\xc3\x6e\xb0\x5e\xc8\xf5\xb4\x18\x64\xaa\x57\x93\x92\xea\x60\xd8\x3f\x97\xec\xcb\xfa\xb8\xf1\xc1\x2f\xde\xf0\x72\x1d\x44\xbb\xcc\xcf\xdf\x2d\xf8\x5b\x77\x89\x14\xbf\x2f\xf0\xe6\x7f\x61\x02\x69\x0e\xa3\x51\x93\xea\x64\x23\xe3\xda\xa6\x1e\x8c\x5c\x51\x21\x91\x82\x05\x98\x91\xaf\x22\xdb\xf8\xfc\x7a\x34\x18\x88\x93\x5b\x51\xef\x48\xa9\xb8\xdf\xac\x89\x7f\x9a\xa3\xc6\xff\xc3\x4f\x05\x71\xd3\x08\x55\x82\xb1\x67\xbe\xd7\x9a\x99\x8b\xab\xa1\xd2\xa3\x1a\xdf\xb9\xf2\xaf\x8f\x42\xb5\xd9\x5f\x44\xbb\x9c\xe0\xc5\xdd\x71\xed\x6c\x5a\x0b\xe7\x72\xcf\xfc\xcc\xcc\xc5\xd4\x69\x8d\xf0\xec\x85\x1a\x21\xc3\x65\x2e\x9b\xa2\x24\x52\xb2\x87\xf9\xf8\x37\x8a\x7f\xf4\xc0\x7b\x97\xe2\xf2\x94\x97\x0e\xa6\x89\x59\x6c\xea\xf9\x2c\xa6\x2b\x3f\x64\x8f\xb7\x5a\xc3\x7e\x97\xb7\x8e\xc5\x61\x97\x97\xab\xe3\xc2\x5f\x93\x6d\x09\xd5\x2d\x6c\xe6\x5e\x62\x49\x9f\xf5\xbf\x87\xfd\xae\x7f\xbf\xcf\xdf\xbf\xe2\xe7\xdb\xc1\x15\x79\x06\x4e\x6e\xca\xb2\x99\x23\x19\x0d\x6b\x86\x3c\x94\x4a\x34\xf8\x53\xa6\xd0\x0c\xd9\xb0\x4d\x47\x26\x93\x8b\x0b\xaa\xaa\xaa\x4f\x32\xe2\x6d\x41\x9c\x5d\x84\x66\x34\x83\x68\xab\x19\xc9\x0a\xa7\xa6\x42\x6c\xe2\xe5\x6b\x00\x00\x00\xff\xff\xe7\x28\x14\x3d\x2b\x04\x00\x00"

func confAppSampleConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppSampleConf,
		"conf/app.sample.conf",
	)
}

func confAppSampleConf() (*asset, error) {
	bytes, err := confAppSampleConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.sample.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confAppTestConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xdb\x4e\xdb\x48\x18\xbe\xde\x79\x8a\x91\x73\x87\x84\xb1\x73\x20\xc9\x45\x56\xe2\x62\xef\x57\xda\x07\x88\x26\xf6\x80\x0d\xf1\x8c\xd7\xe3\x70\xd8\xab\x2c\x02\x36\x7b\x08\x39\x20\xc2\x72\x50\x51\x5a\x20\x54\xd0\x24\x17\x34\x2d\x09\xa1\x2f\x93\xb1\x93\xab\xbe\x42\x35\x76\x68\x43\x85\x6a\x4b\x63\xff\x87\xef\x9b\xef\xff\x34\x83\x6c\x9b\x20\x0b\xc3\x0c\x24\x74\x1d\xe7\x19\x46\x8e\x66\x00\xc3\x75\x6d\x9b\x3a\x2e\xcc\xc0\xb4\x92\x56\x80\x53\x20\x16\xd5\x45\x97\xed\x50\x1d\x80\x75\xec\x30\x93\x12\x98\x81\xaa\xac\xc8\x0a\xd0\xa8\xbd\xe5\xe0\xdf\x0b\x98\xb9\x39\xaa\x6f\xc1\x0c\x74\x9d\x02\x06\x20\x02\xfd\x9b\x63\x7f\xfb\x9e\x57\xcb\x7e\xab\x0b\x98\xe9\x62\x79\xba\x1d\xef\x56\xc6\x9d\x3b\xaf\x7a\xe6\xdf\xbd\x9e\xe7\xd5\x7d\x5e\xe9\xfa\xed\xa6\x5f\xdd\x03\x91\x30\x1a\x7f\xe8\xf0\xc7\x1d\x80\x74\xcb\x24\x59\x1b\xb9\x06\xcc\xc0\x20\x10\xb4\xde\x61\xd7\x2b\xb7\x79\xff\x60\xb2\x5b\xf6\x87\x6d\xa0\xe7\x64\x83\x32\xa1\x57\x4d\x46\x65\x55\x89\xcb\xc9\x45\x39\xb9\x28\xf2\x05\x86\x1d\x98\x81\xda\x2a\x13\x91\x8d\x18\xdb\xa0\x8e\x0e\x33\x50\xd2\x56\x99\xb6\xca\xd4\x68\x4c\x0a\x2a\xe1\xbc\xb1\x98\x12\xc0\x5e\x70\x45\x34\x39\x78\xd9\xdc\x14\x4a\x6c\x3b\x2b\x12\xae\x69\xe1\x3f\x28\x11\xad\x4b\xcc\x44\x0b\xbf\x19\x88\xac\x18\xc8\x0c\x66\x3f\xad\x79\xfb\xad\xa9\xc2\x5f\x08\xca\xe5\xf1\x92\x18\xe0\xc9\x9e\x20\x58\xd2\x75\x21\x4f\x52\xa3\x49\x61\xa5\xac\x4a\x61\xfe\xd7\x50\x4e\x4a\x49\xa5\x00\x10\x6c\xe3\x76\x93\x97\xea\xa3\xc1\x80\xff\xd3\x04\x91\x9f\x20\xc3\x1a\x25\x3a\xb4\x4c\x52\x70\x31\x34\x68\xc1\x81\x3a\xda\x82\x16\x25\xae\x01\x37\x30\x5e\x83\x10\x6a\xd4\xb2\x10\xd1\x41\x04\x4e\x9a\x7d\xde\xaf\x7c\x7e\x38\xf1\x5b\x75\x18\x3c\xbc\xb4\x27\x3e\xde\x51\x2f\x58\x2f\xc5\x7a\x56\x0a\x2a\xb5\xeb\x69\x4b\x6d\x38\x1a\x5c\x08\xf4\x55\x63\xd2\x7c\xef\x97\x6e\x79\xa5\x01\xbd\x4e\x85\x5f\xbc\x8d\xfb\xdb\xf7\x89\x34\x7f\x28\xf2\xd6\xbf\x61\x01\x68\x0e\x25\xb2\x49\x74\xbc\x99\x65\xb6\xa9\x07\xb6\x4b\x0a\x4c\xa4\x61\x1c\xce\x89\x57\x12\x63\x7c\x7a\x35\x1e\x0e\xbd\xd3\x3b\xaf\xd1\x15\x54\x31\xbf\x55\xf7\xfe\x6e\x8d\x9b\xff\x8d\x3e\x16\xbd\xdb\x66\xc8\x12\xd8\x9e\xfd\x9e\x6b\x6e\x21\xa6\x84\x4c\x4f\x6c\x7c\xf7\xda\xbf\x39\x0e\xd9\xe6\x7f\xf6\x3a\x95\x04\x2f\xed\x4d\xea\xe7\xb3\x5c\x28\x9f\x7f\xa6\x67\x6e\x41\x55\x66\x39\xc2\x33\x18\x72\x84\x08\x46\x19\x9d\x81\x24\xd2\x62\x86\x68\xec\x1b\xc4\x3f\x7e\xe4\xfd\x2b\xef\xea\x8c\x97\x0f\x67\x81\x39\x64\xea\x85\x1c\x22\x2b\x3f\x44\x4f\xb6\xdb\xa3\x41\x8f\xb7\x4f\xbc\xa3\x1e\xaf\xd4\x26\xc5\x3f\xa7\xdb\x62\xa2\x5b\xc8\xcc\xbf\x84\x12\x3a\x1b\x7f\x8d\x06\x3d\xff\xe1\x80\xbf\xfb\x9f\x5f\xec\x04\x57\xe5\x59\x72\x7a\x63\x96\xcd\x3c\xce\x6a\x48\x33\xc4\xa1\x94\xe4\xe0\x4f\x9a\xc9\x66\xf1\xa6\x6d\x3a\xa2\x98\x5a\x8c\x2b\x8a\xa2\x7c\xa5\xf1\xde\x14\xbd\xf3\xcb\x50\x8c\x66\x60\x6d\x2d\x2b\x50\xa1\x6b\x0a\x54\xa7\x5a\xbe\x04\x00\x00\xff\xff\xec\xe0\xbb\x8a\x33\x04\x00\x00"

func confAppTestConfBytes() ([]byte, error) {
	return bindataRead(
		_confAppTestConf,
		"conf/app.test.conf",
	)
}

func confAppTestConf() (*asset, error) {
	bytes, err := confAppTestConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.test.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confNginxRw = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\xbf\x4e\xc3\x40\x0c\x87\xf7\x3e\x85\x87\x0c\x30\x90\xa4\x2c\xd0\x66\x81\x05\x75\x64\x60\x60\x3b\x1d\x77\x4e\x73\x90\x9e\x23\xdb\x94\x54\x4d\xde\x1d\x85\x6b\x51\x40\x42\xfc\x26\xcb\x7f\x3e\x7f\x82\xbc\x47\x86\xe3\x02\x00\xa0\x0d\xa2\x18\x21\xe5\xb6\xac\xbe\x9a\x69\xc3\x44\xbb\x43\x80\x48\x7b\x6c\x05\x2d\xbb\x26\x77\x2e\x2d\x30\x91\xc2\x31\x7b\xbc\x7f\xda\x8c\xd5\x22\x81\xc8\x59\x0d\x14\xa1\x38\x91\xa7\x28\x1f\x4c\x1d\x5a\x14\x28\x4c\x24\x35\xd8\x07\x51\x31\x70\xf7\x62\xdd\x1b\x46\x9f\x68\xe3\x6f\xc2\x85\x13\x19\x5e\x65\xa8\x29\xaa\x0c\x61\xb7\xbd\x9c\x43\xad\x73\x28\x62\x5a\xda\x02\xd5\x75\xf5\xdd\xc7\xbe\x0b\x8c\x02\x4b\x7f\x52\xfa\x69\x90\xbd\x73\xf8\xe7\xf1\x79\x3a\x7b\xd6\x31\xf5\x07\x23\xa8\xa6\x41\xeb\x91\xe1\xf9\xea\x81\xf8\xc3\xb2\x47\x3f\x55\x90\x31\xee\x48\xd1\x58\xef\xb9\xfa\xfb\x6c\x43\xa2\x30\x4b\xd6\xa8\x76\xa6\x21\xd1\x99\x6c\xba\xea\xac\x08\x4c\xe3\x75\x51\x2c\xaf\x6f\xf2\x32\x2f\xf3\xe5\x7a\x55\xae\xca\xb3\xf5\xf8\x19\x00\x00\xff\xff\x98\xf7\x51\x1d\xc3\x01\x00\x00"

func confNginxRwBytes() ([]byte, error) {
	return bindataRead(
		_confNginxRw,
		"conf/nginx.rw",
	)
}

func confNginxRw() (*asset, error) {
	bytes, err := confNginxRwBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/nginx.rw", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confNovelsearchConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\x31\x0a\xc3\x30\x0c\x45\x77\x5f\xa3\x7b\xd4\xae\x05\x6f\xbd\x42\xa7\xd2\x41\x55\x54\xdb\xa4\xb6\x8c\x24\xe7\xfc\x85\x40\xc0\xdb\xfb\x9f\xc7\x7b\x75\x95\xa4\x58\xef\x4d\x76\xfe\x19\xa3\x52\x7e\x07\x92\x5a\xb1\xad\x11\x9e\xc6\x6a\x50\xcb\x2a\x9b\xc1\x83\x6d\x73\xe9\x90\xa4\xa3\x67\x30\x25\x48\xc5\xf3\xf8\x2c\x24\xf5\x94\xa6\xce\xcc\x01\x87\x8b\x39\xaa\x47\xd7\xc1\xc7\x54\x9e\x8e\x03\x8d\xc9\xe2\xed\x1a\x2e\xc0\x4e\x60\xa3\xb3\xee\xc5\x44\xe7\xd2\x42\xd2\xbe\xe1\x1f\x00\x00\xff\xff\x3d\xb3\xa7\xaf\xb8\x00\x00\x00"

func confNovelsearchConfBytes() ([]byte, error) {
	return bindataRead(
		_confNovelsearchConf,
		"conf/novelsearch.conf",
	)
}

func confNovelsearchConf() (*asset, error) {
	bytes, err := confNovelsearchConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/novelsearch.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confNovelsearchTplConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xc1\x8a\x14\x41\x0c\x86\xef\xfd\x14\x81\x46\xd1\x43\x77\xe9\x75\x65\x04\x6f\x7b\x73\x41\x3d\x89\x0c\x35\xa9\x4c\x77\x61\x55\xa5\x48\x52\xb3\xca\xba\xef\x2e\xbd\x33\x3a\xbd\x2e\x32\xec\xa9\x93\xfe\xbf\x84\xfc\x49\x7d\xad\xc2\x93\xf8\x7c\x55\xf8\x40\x49\xc9\x0b\xce\xdf\x3a\xe4\x9c\x7d\x09\x1b\x0c\x70\x77\x77\xf3\xe1\xf3\xf5\xfd\xfd\xbb\xc2\x73\xab\x30\xba\x15\x08\x2f\x3b\xdf\x8c\xd5\xbc\xd8\xc6\xa4\xd1\x43\x2a\xb4\xfa\xf1\x10\x2a\xa1\x6e\xde\xbe\xe9\xd4\x02\x37\xdb\x26\x9e\xf6\x31\xd1\xc6\x1d\xbc\xb8\xc4\x93\xd3\x56\x49\x0e\x51\x59\xdc\x8b\x57\xa7\x81\xb6\xc5\x67\x7a\xad\x63\xe2\x69\xa9\x23\x91\xe7\xd7\xf5\xe0\xc8\x70\x8d\xad\x86\x1f\x91\xcb\xbe\xeb\x7a\xc0\x00\x4e\x98\x6d\x2d\x76\x3d\xdc\x4e\x64\x30\x9b\x55\xbd\x72\x4e\xfc\xed\x38\x45\x9b\xdb\xae\x29\x09\x72\x31\x2a\x36\x22\x67\xf7\xe9\xdc\x3c\x96\x68\x8a\x12\xab\xa9\xcb\x5e\x8d\xc4\x21\x15\x63\x1d\xf4\xa7\x1a\xe5\x30\x90\xa1\xc2\xf0\x11\x5c\x53\x71\x29\xee\xdc\x49\x38\x7d\xff\xa4\xc3\x79\xe2\x51\x97\x00\xa9\xeb\x81\x70\xe6\xed\x59\x09\xdb\xc5\x00\xbc\xff\xd7\x63\x38\x1a\xeb\xe1\xd8\x0c\x2d\x01\x15\xbf\x4b\x04\x4f\xbb\x3f\xa2\x4e\x77\xbb\x84\xa9\x79\x6b\x7a\x99\xe2\x7a\x89\x09\x9e\x32\x97\x41\x28\xb1\x0f\x8b\xf2\x17\x43\x4b\xdd\x72\x1a\xf3\x31\xc1\xb0\x07\x67\xb9\x3e\xb2\x78\xbc\x2e\x7a\x7b\x2a\xd5\x18\xe0\x17\xfc\xf0\x32\x29\x68\x0b\x0c\xdf\x63\x4a\x30\x5c\x7f\xb9\x59\xde\xc3\xb2\xf8\x5d\x2c\xeb\x0a\x18\xf0\x3f\x3b\xfc\x1d\x00\x00\xff\xff\x0c\x45\x81\x13\x1d\x03\x00\x00"

func confNovelsearchTplConfBytes() ([]byte, error) {
	return bindataRead(
		_confNovelsearchTplConf,
		"conf/novelsearch.tpl.conf",
	)
}

func confNovelsearchTplConf() (*asset, error) {
	bytes, err := confNovelsearchTplConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/novelsearch.tpl.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.conf":             confAppConf,
	"conf/app.sample.conf":      confAppSampleConf,
	"conf/app.test.conf":        confAppTestConf,
	"conf/nginx.rw":             confNginxRw,
	"conf/novelsearch.conf":     confNovelsearchConf,
	"conf/novelsearch.tpl.conf": confNovelsearchTplConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.conf":             &bintree{confAppConf, map[string]*bintree{}},
		"app.sample.conf":      &bintree{confAppSampleConf, map[string]*bintree{}},
		"app.test.conf":        &bintree{confAppTestConf, map[string]*bintree{}},
		"nginx.rw":             &bintree{confNginxRw, map[string]*bintree{}},
		"novelsearch.conf":     &bintree{confNovelsearchConf, map[string]*bintree{}},
		"novelsearch.tpl.conf": &bintree{confNovelsearchTplConf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
